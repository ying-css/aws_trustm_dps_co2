/*
 * ##################################################################################
 *
 * XFP internal build pipeline
 * should run fast (<10min) with following parts
 * - unit test and report
 * - SonarQube report
 * - compilation (if for more than one framework, than in parallel)
 * - doxygen build and deploy on internal server
 *
 */

library("jenkins-pipeline-ifx-library")

def projectName = 'eden-artifactory-demo'
def artifactoryServer = 'Artifactory'
def artifactoryRepo = 'gen-des-epe-sw-development-local'
def artifactoryTarget = 'gen-des-tools-prod-eden-local'
def artifactorySW = 'https://artifactory.intra.infineon.com/artifactory/gen-des-epe-sw-development-local/'

def inoVER   = '0.18.3'
def inoCLI   = 'arduinoCLI/0.18.3'
def inoLTGZ  = 'arduino-cli_0.18.3_Linux_64bit.tar.gz'
def inoWTGZ  = 'arduino-cli_0.18.3_Windows_64bit.zip'
def inoBoard = 'arduinoBoardPackage/0.18.3'
def brdLTGZ  = 'arduino-board-package_0.18.3_Linux_64bit.tar.gz'
def brdWTGZ  = 'arduino-board-package_0.18.3_Linux_64bit.tar.gz'

def mtbVER   = '2.3.1'
def mtbTools = 'ModusToolbox/2.3.1'
def mtbTtgz  = 'ModusToolbox_tools_2.3.1_Linux_64bit.tar.gz'

def linuxTools = '/home/xfpjenki/tools'
def winTools   = 'D:/tools'


pipeline {
	/**
	 * node where to run on
	 */
	agent any

	/**
	 * Parameter choice settings for manual start 
	 */
	parameters {
		choice(name: 'TIER',          choices:['development','staging','production'], description: 'tier setting')
		choice(name: 'SERVER',        choices:['vihlarazweb3','vihlarazweb2'],        description: 'server')
		choice(name: 'SONARINSTANCE', choices:['Sonar','Sonar-Test','Sonar-Prod'],    description: 'SonarQube instance')
		string(name: 'TESTBRANCH',    defaultValue: 'develop',                        description: 'e.g. DESMAKERS-990')
	}

	/**
	 * Environment settings for shell calls
	 */
	environment {
		TIER           = "${params.TIER}"
		WEB_ROOT       = "/home/razweb/htdocs-${params.SERVER}"
		REPO_NAME      = "${JOB_NAME.replaceFirst(/^.*\/XFP (.*)\/.*$/, '$1')}"
		DOCS_SOURCE    = "${WORKSPACE}/docs/doxygen/build"
		DOCS_TARGET    = "${env.WEB_ROOT}/itec/xfp/${env.REPO_NAME}/${env.BRANCH_NAME}"
		ROOT_URL       = "https://${params.SERVER}.vih.infineon.com"
		// scannerHome    = tool 'sonar-scanner-cli-4.2.0.1873-linux'
		SONARINSTANCE  = "${params.SONARINSTANCE}"
	}

	/**
	 * Keep only the last 2 artifacts on the server to prevent from
	 * locking massive amount of disk space. The number should <= 5.
	 */
	options {
		ansiColor('xterm')
		buildDiscarder(
			logRotator(
				numToKeepStr: '2',
				artifactNumToKeepStr: '2'
			)
		)
		disableConcurrentBuilds()
	}

	/**
	 * Set up cron triggers for constant pipeline builds if this is needed
	 */
	/*
	triggers {
		cron('H H(0-1) * * *')
	}
	*/

	stages {

		// *
		// * ************************************************************DevCI TRIGGER
		// *
		stage('Vars') {
			steps {
				sh(script: "echo ${params.TIER}",       label: "TIER         :")
				sh(script: "echo ${env.WEB_ROOT}",      label: "WEB_ROOT     :")
				sh(script: "echo ${env.ROOT_URL}",      label: "ROOT_URL     :")
				sh(script: "echo ${env.BRANCH_NAME}",   label: "BRANCH_NAME  :")
				sh(script: "echo ${env.BUILD_NUMBER}",  label: "BUILD_NUMBER :")
				sh(script: "echo ${WORKSPACE}",         label: "WORKSPACE    :")
				sh(script: "echo ${env.SONARINSTANCE}", label: "SONARINSTANCE:")
				sh(script: "echo ${params.SERVER}",     label: "SERVER       :")
				sh(script: "echo ${env.REPO_NAME}",     label: "REPO_NAME    :")
				sh(script: "echo ${env.DOCS_SOURCE}",   label: "DOCS_SOURCE  :")
				sh(script: "echo ${env.DOCS_TARGET}",   label: "DOCS_TARGET  :")
			} // end steps
		} // end DevCI trigger
		stage('Check') {
			parallel {
				/*-----------------------------------------------------------------------------
				 * cppcheck
				 * -----------------------------------------------------------------------------
				 */
				stage('CPP') {
					agent {
						node {
							label 'epelinux3'
						}
					}
					steps {
						echo "cppcheck"
						script {
							def result = sh(
								script: '''
									cd ./
									export PATH=/opt/sofit/cppcheck/1.76.1/bin:$PATH
									mkdir -p build
									/opt/sofit/cppcheck/1.76.1/bin/cppcheck -v --enable=all --xml-version=2 -I src test 2> build/cppcheck-report.xml
								''',
								returnStdout: true
							).trim()
							echo "$result"
						}
					} // end steps
				} // end cppcheck

				/*-----------------------------------------------------------------------------
				* unit test
				*-----------------------------------------------------------------------------
				*/
				stage('unit test') {
					steps {
						echo "unit test"
						//sh ("export DOXY_BIN_PATH=/usr/local/bin/;cd ${env.WORKSPACE}/docs;/usr/bin/make html")
					}
				}

			} // parallel
		} // end stage

		stage('Artifactory') {
			parallel {

				/*-----------------------------------------------------------------------------
				 * Arduino Linux CLI
				 *-----------------------------------------------------------------------------
				 */
				stage('Arduino') {
					stages('ino') {

						stage('Arduino CLI') {
							agent {
								node {
									label 'epelinux1'
								}
							}

							steps {
								script {
									if (isUnix()) {
										env.tools = linuxTools
										env.cli   = inoLTGZ
										env.board = brdLTGZ
									}else{
										env.tools = winTools
										env.cli   = inoWTGZ
										env.board = brdWTGZ
									}
								}
								// ArduinoCLI package
								rtDownload (
									serverId: artifactoryServer,
									spec: """
										{ "files": [
												{
													"pattern": "${artifactoryRepo}/${inoCLI}/${env.cli}",
													"target": "${env.tools}/"
												}
											]
										}
									"""
								)
								// Arduino Board package
								rtDownload (
									serverId: artifactoryServer,
									spec: """
										{ "files": [
												{
													"pattern": "${artifactoryRepo}/${inoBoard}/${env.board}",
													"target": "${env.tools}/",
													"flat": "true"
												}
											]
										}
									"""
								)
								// Arduino library package
								rtDownload (
									serverId: artifactoryServer,
									spec: """
										{ "files": [
												{
													"pattern": "${artifactoryRepo}/arduino/libraries/",
													"target": "${env.tools}/arduino/libraries/",
													"flat": "true",
													"explode": "true"
												}
											]
										}
									"""
								)
								// unpacking
								sh(
									script: '''
										cd ${tools}
										tar -xf ${board}
										rm ${board}
										tar -xf '''+inoCLI+'''/${cli} --directory '''+inoCLI+'''
										rm '''+inoCLI+'''/${cli}
									'''
								)

							}
							when { expression { return fileExists ('${env.tools}/${inoCLI}/arduino-cli') } }

						}

					} // end stages
				} // end stage

				/*-----------------------------------------------------------------------------
				 * Modus Toolbox
				 *-----------------------------------------------------------------------------
				 */
				stage('MTB') {
					stages('ModusToolbox') {

						stage('MTB setup') {

							agent {
								node {
									label 'epelinux3'
								}
							}
							steps {
								script {
									if (isUnix()) {
										env.tools = linuxTools
									}else{
										env.tools = winTools
									}
								}
								rtDownload (
									serverId: artifactoryServer,
									spec: """
										{ "files": [
												{
													"pattern": "${artifactoryRepo}/${mtbTools}/${mtbTtgz}",
													"target": "${env.tools}/",
													"flat": "true"
												}
											]
										}
									"""
								)
								sh(
									script: '''
										cd ${tools}
										tar -xf '''+mtbTtgz+'''
										rm '''+mtbTtgz+'''
									'''
								)
							}

							when { expression { return fileExists ('${linuxTools}/ModusToolbox/') } }

						}

					} // end stages
				} // end stage

				/*-----------------------------------------------------------------------------
				 * WiCED Toolbox
				 *-----------------------------------------------------------------------------
				 */
				stage('WiCED') {
					stages('wcd') {

						stage('WiCED setup') {
							//when { expression { return fileExists ('./.arduino15/library-index.json') } }
							steps {
								echo "WiCED setup"
								script {
									if (isUnix()) {
										env.tools = linuxTools
									}else{
										env.tools = winTools
									}
								}
								// rtDownload (
								// 	serverId: artifactoryServer,
								// 	spec: """
								// 		{
								// 			"files": [
								// 						{
								// 							"pattern": "${artifactoryRepo}/${wicedIDE}/${wicedTgz}",
								// 							"target": "${env.tools}/",
								// 							"flat ": "true"
								// 						}
								// 					]
								// 		}
								// 	"""
								// )
								// sh(
								// 	script: '''
								// 		cd ${tools}
								// 		tar -xf '''+wicedTgz+'''
								// 		rm '''+wicedTgz+'''
								// 	'''
								// )
								script {
									def result = sh(
										script: '''
											cd ${tools}
											ls -la
										''',
										returnStdout: true
									).trim()
									echo "$result"
								}
							}
						}

					} // end stages
				} // end stage


				/*-----------------------------------------------------------------------------
				 * Raspberry PI
				 *-----------------------------------------------------------------------------
				 */
				stage('RPi') {
					stages('RaspberryPi') {

						stage('RPi setup') {
							agent {
								node {
									label 'epewin'
								}
							}
							//when { expression { return fileExists ('./.arduino15/library-index.json') } }
							steps {
								echo "RPi setup"
							}
						}

					} // end stages
				} // end stage

			} // end parallel
		} // end stage

		stage('build') {
			parallel {

				/*-----------------------------------------------------------------------------
				 * Arduino Linux CLI
				 *-----------------------------------------------------------------------------
				 */
				stage('Arduino Linux') {
					agent {
						node {
							label 'epelinux3'
						}
					}

					stages('Arduino') {
						stage('Generate INO') {
							steps {
								echo "xfp-dev"
								// prepares the build directory and runs
								// xfp-dev to generate the arduino only directory structure
								sh(
									script: '''
										cd ./
										export PATH=/opt/python/3.9/linux/RHEL60/bin:$PATH
										export PYTHONPATH=/opt/python/3.9/linux//RHEL60//../pyperl/python/lib/python3.9/site-packages:/home/xfpjenki/tools/python3
										rm -rf ./build/Arduino
										mkdir -p ./build/Arduino
										'''+linuxTools+'''/python3/bin/xfp-dev arduino lib-pack --path=./build/Arduino
									''',
									returnStdout: true
								)
							} // end xfp-dev
						}

						stage('CLI Build') {

							steps {
								echo "cli"
								// checks for OS system and than compiles all
								// examples  with the arduino-cli tool
								script {
									if (isUnix()) {
										env.tools = linuxTools
									}else{
										env.tools = winTools
									}
								}
								script {
									def result = sh(
										script: '''
											cd ./
											export lib=`ls -1 ./build/Arduino/`
											export examples=(`ls -1 ./build/Arduino/${lib}/examples/`)
											echo $examples
											for i in "${examples[@]}"
											do
												echo $i;
												${tools}/'''+inoCLI+'''/arduino-cli compile --config-file ${tools}/.arduino15/arduino-cli.yaml --verbose --fqbn arduino:avr:uno --libraries=./build/Arduino/${lib} build/Arduino/${lib}/examples/$i
											done
										''',
										returnStdout: true
									).trim()
									echo "$result"
								}
							} // end CLI Build
						}

					}

				}

				// /*-----------------------------------------------------------------------------
				//  * PlatformIO build
				//  *-----------------------------------------------------------------------------
				//  */
				// stage('PIO') {
				// 	steps {
				// 		echo "PlatformIO"
				// 		/*
				// 		sh ("export DOXY_BIN_PATH=/usr/local/bin/;cd ${env.WORKSPACE}/docs;/usr/bin/make pdf")
				// 		build(
				// 			job: 'dev/doxy_maker_pdf',
				// 			propagate: true,
				// 			parameters: [
				// 				[
				// 					$class: 'StringParameterValue',
				// 					name: 'WORKSPACE',
				// 					value: "${env.WORKSPACE}"
				// 				],
				// 			]
				// 		)
				// 		*/
				// 	}
				// }

				/*-----------------------------------------------------------------------------
				 * doxygen
				 *-----------------------------------------------------------------------------
				 */
				stage('docu') {
					agent {
						node {
							label 'epelinux2'
						}
					}

					stages {

						stage('doxygen') {
							steps {
								echo "doxygen"
								// doxygen runs always, therefore it
								// 1. removes the documentation target directory
								// 2. generates it new
								// 3. copies the doxygen build directory into the target directory
								script {
									def result = sh(
										script: '''
											cd ./
											export DOCS_SOURCE=${WORKSPACE}/docs/doxygen/build
											export PATH=/opt/doxygen/1.8.14/bin:/opt/python/anaconda/4.2.0/py3.5.2:$PATH
											rm -rf infineondoxygenerator
											git clone https://bitbucket.vih.infineon.com/scm/ghmm/infineondoxygenerator.git;
											cd ./infineondoxygenerator;
											python3 doxyifx.py html
											rm -rf ${DOCS_TARGET}
											mkdir -p ${DOCS_TARGET}
											cp -R ${DOCS_SOURCE}/ ${DOCS_TARGET}/.
										''',
										returnStdout: true
									).trim()
									echo "$result"
								}
							} // end doxygen
						} // end stage

						stage('Sphinx') {
							when { expression { return fileExists ('./docs/index.rst') } }
							steps {
								echo "ReadTheDocs"
								// Sphinx runs only if the index.rst exists and it
								// 1. removes the documentation directory below the target directory
								// 2. copies the new Sphinx documentation into new documentation directory
								script {
									def result = sh(
										script: '''
											export PATH=/opt/python/3.9/linux/RHEL60/bin:$PATH
											cd docs
											sphinx-build ./ ./documentation
											mkdir -p ${DOCS_TARGET}
											rm -rf ${DOCS_TARGET}/documentation
											cp -R ./documentation ${DOCS_TARGET}/.
										''',
										returnStdout: true
									).trim()
									echo "$result"
								}

							} // end ReadTheDocs
						} // end sphinx

					 } // end stages

				} // end docu

			} // end parallel
		} // end docu build

		/*-----------------------------------------------------------------------------
		 * SonarQube stage runs the sonar scanner and collects all reports
		 *-----------------------------------------------------------------------------
		 */
		stage('SonarQube') {
			steps {
				echo "SonarQube"
				catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
					withSonarQubeEnv(
						installationName: "${params.SONARINSTANCE}"
					){
						script {
							if (isUnix()) {
								env.scannerHome = tool 'sonar-scanner-cli-4.2.0.1873-linux'
							}else{
								env.scannerHome = tool 'sonar-scanner-4.2.0.1873'
							}
							def result = sh(
								script: '''
									cp ./devops/xfpbuild/sonar-project.properties ./.;
									${scannerHome}/bin/sonar-scanner -X
								''',
								returnStdout: true
							).trim()
							echo "$result"
						}
					}
				} // end catch
				catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
					timeout(time: 200, unit: 'MINUTES') {
						waitForQualityGate abortPipeline: true
					}
				} // end catch
			} // end steps

		} // end SonarQube

	} // end stages

	/*-----------------------------------------------------------------------------
	 * post
	 *-----------------------------------------------------------------------------
	 */
	
	post {
		failure {
			
			mail(
				to: 'Olaf.Filies@infineon.com',
				subject: "[EPE JENKINS] pipeline: ${env.BRANCH_NAME}",
				body: "Something during Jenkins pipeline run went wrong."
			)
			
		}
	}

}
